File.open("libs/imspinner/imspinner.h"){|fp|
  sNotice = "/*\n This files has been auto generated by srcript.\n Don't edit this file.\n*/"
  cppFile = []
  cppFile.push sNotice
  cppFile.push "\n#include \"imspinner.h\""
  cppFile.push "#include \"cimspinner.h\""
  cppFile.push ""
  cfuncHeader = []
  cfuncHeader.push sNotice
  cfuncHeader.push "\n#pragma once"
  cfuncHeader.push "#ifdef __cplusplus"
  cfuncHeader.push "extern \"C\" {"
  cfuncHeader.push "#endif"
  cfuncHeader.push ""

  fp.each {|line|
    if  line =~ /\s+inline\s+void\s+(Spinner\w+)\((.+)\)/
      cargsDefShort = []
      cppargsShort = []
      cargEx = []
      cfuncname = $1
      cppargs = $2
      ######
      if cppargs.include? "/*thickness*/" or line =~/LeafColor/
        puts "------ Eliminated function at this moment"
        puts line
        puts "-----------------------------------------"
        next
      end
      ######
      cppFile.push  "/* C++ definition"
      cppFile.push  "   void Spinner::#{cfuncname}(#{cppargs})"
      cppFile.push  "*/"
      cargsDefShort =  []
      cppargs.split(",").each {|arg|
        if not arg.include? "="
          # C function args short
          cargsDefShort.push arg.gsub("&","")
          # Cpp args short
          cppargsShort.push arg.split(" ").last.gsub("*","").gsub("&","")
        else
          cargEx.push arg
        end
      }
      # Generate C header file
      # Short function
      cargs = cargsDefShort.join(",")
      cfunc = "void #{cfuncname}(#{cargs})"
      cfuncHeader.push  cfunc + ";\n"
      cppFile.push "#{cfunc} \{"
      # Generate cpp function call with short args
      shortArgs = cppargsShort.join(", ")
      funcname = cfuncname
      cppFile.push "  ImSpinner::#{funcname}(#{shortArgs});"
      cppFile.push "}"
    end
  }
  # Output CPP source
  File.open("cimspinner.cpp","w") {|fp|
    cppFile.each {|line|
      fp.puts line
    }
  }
  # Output C Header file
  cfuncHeader.push "#ifdef __cplusplus"
  cfuncHeader.push "}"
  cfuncHeader.push "#endif"
  File.open("cimspinner.h","w") {|fp|
    cfuncHeader.each {|line|
      fp.puts line.chomp
    }
  }
}
